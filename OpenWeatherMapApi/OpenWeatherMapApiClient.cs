// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace OpenWeatherMapApi
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Get current weather, daily forecast for 16 days, and 3-hourly forecast
    /// 5 days for your city. Helpful stats, graphics, and this day in history
    /// charts are available for your reference. Interactive maps show
    /// precipitation, clouds, pressure, wind around your location stations.
    /// Data is available in JSON, XML, or HTML format. **Note**: This sample
    /// Swagger file covers the `current` endpoint only from the OpenWeatherMap
    /// API. &lt;br/&gt;&lt;br/&gt; **Note**: All parameters are optional, but
    /// you must select at least one parameter. Calling the API by city ID
    /// (using the `id` parameter) will provide the most precise location
    /// results.
    /// </summary>
    public partial class OpenWeatherMapApiClient : ServiceClient<OpenWeatherMapApiClient>, IOpenWeatherMapApiClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Client API version.
        /// </summary>
        public string ApiVersion { get; private set; }

        /// <summary>
        /// Initializes a new instance of the OpenWeatherMapApiClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling OpenWeatherMapApiClient.Dispose(). False: will not dispose provided httpClient</param>
        public OpenWeatherMapApiClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the OpenWeatherMapApiClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public OpenWeatherMapApiClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the OpenWeatherMapApiClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public OpenWeatherMapApiClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the OpenWeatherMapApiClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public OpenWeatherMapApiClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the OpenWeatherMapApiClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public OpenWeatherMapApiClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            BaseUri = new System.Uri("http://localhost");
            ApiVersion = "2.5";
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
        /// <summary>
        /// Call current weather data for one location
        /// </summary>
        /// <remarks>
        /// Access current weather data for any location on Earth including over
        /// 200,000 cities! Current weather is frequently updated based on global
        /// models and data from more than 40,000 weather stations.
        /// </remarks>
        /// <param name='q'>
        /// **City name**. *Example: London*. You can call by city name, or by city
        /// name and country code. The API responds with a list of results that match a
        /// searching word. For the query value, type the city name and optionally the
        /// country code divided by comma; use ISO 3166 country codes.
        /// </param>
        /// <param name='id'>
        /// **City ID**. *Example: `2172797`*. You can call by city ID. API responds
        /// with exact result. The List of city IDs can be downloaded
        /// [here](http://bulk.openweathermap.org/sample/). You can include multiple
        /// cities in parameter &amp;mdash; just separate them by commas. The limit of
        /// locations is 20. *Note: A single ID counts as a one API call. So, if you
        /// have city IDs. it's treated as 3 API calls.*
        /// </param>
        /// <param name='lat'>
        /// **Latitude**. *Example: 35*. The latitude cordinate of the location of your
        /// interest. Must use with `lon`.
        /// </param>
        /// <param name='lon'>
        /// **Longitude**. *Example: 139*. Longitude cordinate of the location of your
        /// interest. Must use with `lat`.
        /// </param>
        /// <param name='zip'>
        /// **Zip code**. Search by zip code. *Example: 95050,us*. Please note if
        /// country is not specified then the search works for USA as a default.
        /// </param>
        /// <param name='units'>
        /// **Units**. *Example: imperial*. Possible values: `metric`, `imperial`. When
        /// you do not use units parameter, format is `standard` by default. Possible
        /// values include: 'standard', 'metric', 'imperial'
        /// </param>
        /// <param name='lang'>
        /// **Language**. *Example: en*. You can use lang parameter to get the output
        /// in your language. We support the following languages that you can use with
        /// the corresponded lang values: Arabic - `ar`, Bulgarian - `bg`, Catalan -
        /// `ca`, Czech - `cz`, German - `de`, Greek - `el`, English - `en`, Persian
        /// (Farsi) - `fa`, Finnish - `fi`, French - `fr`, Galician - `gl`, Croatian -
        /// `hr`, Hungarian - `hu`, Italian - `it`, Japanese - `ja`, Korean - `kr`,
        /// Latvian - `la`, Lithuanian - `lt`, Macedonian - `mk`, Dutch - `nl`, Polish
        /// - `pl`, Portuguese - `pt`, Romanian - `ro`, Russian - `ru`, Swedish - `se`,
        /// Slovak - `sk`, Slovenian - `sl`, Spanish - `es`, Turkish - `tr`, Ukrainian
        /// - `ua`, Vietnamese - `vi`, Chinese Simplified - `zh_cn`, Chinese
        /// Traditional - `zh_tw`. Possible values include: 'ar', 'bg', 'ca', 'cz',
        /// 'de', 'el', 'en', 'fa', 'fi', 'fr', 'gl', 'hr', 'hu', 'it', 'ja', 'kr',
        /// 'la', 'lt', 'mk', 'nl', 'pl', 'pt', 'ro', 'ru', 'se', 'sk', 'sl', 'es',
        /// 'tr', 'ua', 'vi', 'zh_cn', 'zh_tw'
        /// </param>
        /// <param name='mode'>
        /// **Mode**. *Example: html*. Determines format of response. Possible values
        /// are `xml` and `html`. If mode parameter is empty the format is `json` by
        /// default. Possible values include: 'json', 'xml', 'html'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<object>> CurrentWeatherDataWithHttpMessagesAsync(string q = default(string), string id = default(string), string lat = default(string), string lon = default(string), string zip = default(string), string units = default(string), string lang = default(string), string mode = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            string apiVersion = "2.5";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("q", q);
                tracingParameters.Add("id", id);
                tracingParameters.Add("lat", lat);
                tracingParameters.Add("lon", lon);
                tracingParameters.Add("zip", zip);
                tracingParameters.Add("units", units);
                tracingParameters.Add("lang", lang);
                tracingParameters.Add("mode", mode);
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CurrentWeatherData", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "weather").ToString();
            List<string> _queryParameters = new List<string>();
            if (q != null)
            {
                _queryParameters.Add(string.Format("q={0}", System.Uri.EscapeDataString(q)));
            }
            if (id != null)
            {
                _queryParameters.Add(string.Format("id={0}", System.Uri.EscapeDataString(id)));
            }
            if (lat != null)
            {
                _queryParameters.Add(string.Format("lat={0}", System.Uri.EscapeDataString(lat)));
            }
            if (lon != null)
            {
                _queryParameters.Add(string.Format("lon={0}", System.Uri.EscapeDataString(lon)));
            }
            if (zip != null)
            {
                _queryParameters.Add(string.Format("zip={0}", System.Uri.EscapeDataString(zip)));
            }
            if (units != null)
            {
                _queryParameters.Add(string.Format("units={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(units, SerializationSettings).Trim('"'))));
            }
            if (lang != null)
            {
                _queryParameters.Add(string.Format("lang={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(lang, SerializationSettings).Trim('"'))));
            }
            if (mode != null)
            {
                _queryParameters.Add(string.Format("Mode={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(mode, SerializationSettings).Trim('"'))));
            }
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 404)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<WeatherData>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 404)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<string>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
